!function(t){var e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(s,r,function(e){return t[e]}.bind(null,r));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);class s{constructor(t,e){this.x=t,this.y=e}add(t){this.x+=t.x,this.y+=t.y}mult(t){this.x*=t,this.y*=t}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}normalize(){let t=this.magnitude();this.x/=t,this.y/=t}zero(){this.x=0,this.y=0}distanceTo(t){return new s(t.x-this.x,t.y-this.y)}within(t,e){return this.x<=t.x+e&&this.x>=t.x-e&&this.y<=t.y+e&&this.y>=t.y-e}}class r{constructor(t,e,i,s){this.x=t-i/2,this.y=e-s/2,this.width=i,this.height=s,this.fill=!0}getRandomPosition(){let t,e;this.fill?(t=Math.random()*this.width,e=Math.random()*this.height):Math.random()<.5?(t=Math.random()*this.width,e=this.flipCoin()*this.height):(t=this.flipCoin()*this.width,e=Math.random()*this.height);let i=this.x+t,r=this.y+e;return new s(i,r)}flipCoin(){return Math.random()<.5?0:1}}class a{constructor(t,e,i){this.x=t,this.y=e,this.r=i,this.fill=!0}getRandomPosition(){let t=2*Math.PI*Math.random(),e=this.fill?this.r*Math.random():this.r,i=this.x+e*Math.cos(t),r=this.y+e*Math.sin(t);return new s(i,r)}}class o{set position(t){this.m_position.x=t.x,this.m_position.y=t.y}get position(){return this.m_position}set velocity(t){this.m_velocity.x=t.x,this.m_velocity.y=t.y}get velocity(){return this.m_velocity}set liveforever(t){this.m_liveforever=t}get isActive(){return this.m_active}addForce(t){t.mult(1/this.material.mass),this.m_acceleration.add(t)}constructor(t,e){this.material=e,this.m_position=new s(0,0),this.m_velocity=new s(0,0),this.m_acceleration=new s(0,0),this.liveforever=!1,this.m_lifetime=t,this.m_time_lived=0,this.m_active=!0}update(){this.m_velocity.add(this.m_acceleration),this.m_position.add(this.m_velocity),this.m_acceleration.zero(),this.m_time_lived>this.m_lifetime&&(this.m_active=!1),this.m_liveforever||this.m_time_lived++}}class n{constructor(t,e,i){this.ps_options=t,this.emitter=e,this.material=i,this.particles=new Array,this.forces=new Array,this.fields=new Array}addForce(t){this.forces.push(t)}addField(t){this.fields.push(t)}update(){this.addNewParticles(),this.updateParticleSystem()}draw(t){for(let e=0;e<this.particles.length;e++){let i=this.particles[e];t.beginPath(),t.fillStyle=this.material.color,t.arc(i.position.x,i.position.y,1,0,2*Math.PI),t.fill()}}updateParticleSystem(){for(let t=this.particles.length-1;t>=0;t--){let e=this.particles[t];this.applyForces(e),this.applyFields(e),e.update(),e.isActive||this.particles.splice(t,1)}}addNewParticles(){if(this.particles.length<this.ps_options.particles_max){let t=Math.floor(this.ps_options.particles_per_frame+this.rand()*this.ps_options.particles_per_frame_variance);for(let e=0;e<t;e++){let t=Math.floor(this.ps_options.particles_lifetime+this.rand()*this.ps_options.particles_lifetime_variance),e=new o(t,this.material);e.liveforever=this.ps_options.particles_liveforever,e.position=this.emitter.getRandomPosition(),this.particles.push(e)}}}applyForces(t){for(let e=0;e<this.forces.length;e++){let i=this.forces[e];t.addForce(i.getForce())}}applyFields(t){for(let e=0;e<this.fields.length;e++){let i=this.fields[e];i.updateParticle(t),i.active&&t.addForce(i.getForce())}}rand(){return 2*Math.random()-1}}class l{constructor(t,e,i){this.force=new s(t*i,e*i)}getForce(){return this.force}}let h,c,p,m,d=0;function f(){h.update(),c.update(),m.clearRect(0,0,500,250),h.draw(m),c.draw(m),++d%200==0&&console.log("frame:",d)}let _=new class{constructor(t){this.m_particle=null,this.m_target_position=new s(0,0),this.m_gain=t,this.active=!1}from(t){this.active=!0,this.m_target_position=t}updateParticle(t){this.m_particle=t}getForce(){if(!this.active)return new s(0,0);let t=this.m_particle.position.distanceTo(this.m_target_position),e=t.magnitude();return e=this.constrain(e,35,100),t.normalize(),t.mult(this.m_gain/(e*e)),t}constrain(t,e,i){return Math.max(e,Math.min(i,t))}}(500),u=new class{constructor(t){this.m_particle=null,this.m_target_position=new s(0,0),this.gain=t,this.active=!1}from(t){this.active=!0,this.m_target_position=t}updateParticle(t){this.m_particle=t}getForce(){if(!this.active)return new s(0,0);let t=this.m_particle.position.distanceTo(this.m_target_position),e=new s(t.x,t.y),i=t.magnitude();return e.normalize(),i<5&&(i=5),e.mult(-this.gain/(i*i)),e}}(25);function v(t){let e=t.clientX-p.offsetLeft,i=t.clientY-p.offsetTop,r=new s(e,i);u.from(r),_.from(r)}window.addEventListener("DOMContentLoaded",t=>{!function(){let t=new r(250,125,15,10),e={mass:1,color:"hsla(200, 75%, 50%, 0.8)",shape:"pixel"},i=new l(0,.2,e.mass);(h=new n({particles_max:600,particles_per_frame:12,particles_per_frame_variance:0,particles_liveforever:!1,particles_lifetime:50,particles_lifetime_variance:5},t,e)).addForce(i),h.addField(u)}(),function(){let t=new a(100,120,10),e={mass:1,color:"rgb(0, 0, 0)",shape:"pixel"};c=new n({particles_max:250,particles_per_frame:5,particles_per_frame_variance:0,particles_liveforever:!1,particles_lifetime:50,particles_lifetime_variance:0},t,e);let i=new l(0,.1,e.mass);c.addForce(i),c.addField(_)}(),p=document.querySelector("#stage"),m=p.getContext("2d"),p.addEventListener("mousemove",v),setInterval(f,1e3/45)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,